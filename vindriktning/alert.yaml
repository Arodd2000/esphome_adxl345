substitutions:
  disable_ccs811: "false"
  disable_mhz19: "false"

binary_sensor:
  - platform: template
    id: co2_warn_active
    lambda: |-
      auto level = id(co2_warn_level).state;
      auto sensor = id(mhz19_co2_sensor).state;
      auto active = id(co2_warn_active).state;
      if (level > 0.0 && sensor >= level && !active)
        return true;
      else if ((level == 0.0 || sensor < level) && active)
        return false;
      return {};
    on_state:
      then:
        - script.execute: set_leds
        - component.update: co2_alert

  - platform: template
    id: co2_critical_active
    lambda: |-
      auto level = id(co2_critical_level).state;
      auto sensor = id(mhz19_co2_sensor).state;
      auto active = id(co2_critical_active).state;
      if (level > 0.0 && sensor >= level && !active)
        return true;
      else if ((level == 0.0 || sensor < level) && active)
        return false;
      return {};
    on_state:
      then:
        - script.execute: set_leds
        - component.update: co2_alert

  - platform: template
    id: tvoc_warn_active
    lambda: |-
      auto level = id(tvoc_warn_level).state;
      auto sensor = id(ccs811_tvoc_sensor).state;
      auto active = id(tvoc_warn_active).state;
      if (level > 0.0 && sensor >= level && !active)
        return true;
      else if ((level == 0.0 || sensor < level) && active)
        return false;
      return {};
    on_state:
      then:
        - script.execute: set_leds
        - component.update: tvoc_alert

  - platform: template
    id: tvoc_critical_active
    lambda: |-
      auto level = id(tvoc_critical_level).state;
      auto sensor = id(ccs811_tvoc_sensor).state;
      auto active = id(tvoc_critical_active).state;
      if (level > 0.0 && sensor >= level && !active)
        return true;
      else if ((level == 0.0 || sensor < level) && active)
        return false;
      return {};
    on_state:
      then:
        - script.execute: set_leds
        - component.update: tvoc_alert

  - platform: template
    id: pm_warn_active
    lambda: |-
      auto level = id(pm_warn_level).state;
      auto sensor = id(pm1006_pm_sensor).state;
      auto active = id(pm_warn_active).state;
      if (level > 0.0 && sensor >= level && !active)
        return true;
      else if ((level == 0.0 || sensor < level) && active)
        return false;
      return {};
    on_state:
      then:
        - script.execute: set_leds
        - component.update: pm_alert

  - platform: template
    id: pm_critical_active
    lambda: |-
      auto level = id(pm_critical_level).state;
      auto sensor = id(pm1006_pm_sensor).state;
      auto active = id(pm_critical_active).state;
      if (level > 0.0 && sensor >= level && !active)
        return true;
      else if ((level == 0.0 || sensor < level) && active)
        return false;
      return {};
    on_state:
      then:
        - script.execute: set_leds
        - component.update: pm_alert

text_sensor:
  - platform: template
    id: co2_alert
    name: "${name_verbose} CO2 Alert"
    icon: "mdi:alert-outline"
    update_interval: never
    lambda: |-
      auto warn = id(co2_warn_active).state;
      auto critical = id(co2_critical_active).state;
      if (critical)
        return {"critical"};
      else if (warn)
        return {"warn"};
      return {""};
    disabled_by_default: ${disable_mhz19}

  - platform: template
    id: tvoc_alert
    name: "${name_verbose} TVOC Alert"
    icon: "mdi:alert-outline"
    update_interval: never
    lambda: |-
      auto warn = id(tvoc_warn_active).state;
      auto critical = id(tvoc_critical_active).state;
      if (critical)
        return {"critical"};
      else if (warn)
        return {"warn"};
      return {""};
    disabled_by_default: ${disable_ccs811}

  - platform: template
    id: pm_alert
    name: "${name_verbose} PM Alert"
    icon: "mdi:alert-outline"
    update_interval: never
    lambda: |-
      auto warn = id(pm_warn_active).state;
      auto critical = id(pm_critical_active).state;
      if (critical)
        return {"critical"};
      else if (warn)
        return {"warn"};
      return {""};

