substitutions:
  pin_led_green: GPIO12
  pin_led_power: GPIO16
  pin_number_led_red_orange: "13"

switch:
  - platform: gpio
    id: switch_led_green
    pin:
      number: ${pin_led_green}
      inverted: true
      mode:
        output: true
        open_drain: true

  - platform: template
    id: switch_led_red
    optimistic: true
    on_turn_on:
      then:
        - switch.turn_off: switch_led_orange
        - script.execute: set_led_red_orange
    on_turn_off:
      script.execute: set_led_red_orange

  - platform: template
    id: switch_led_orange
    optimistic: true
    on_turn_on:
      then:
        - switch.turn_off: switch_led_red
        - script.execute: set_led_red_orange
    on_turn_off:
      script.execute: set_led_red_orange

  - platform: gpio
    id: switch_led_power
    pin:
      number: ${pin_led_power}
      mode:
        output: true

  - platform: template
    id: switch_leds_active
    name: "${name_verbose} LEDs Active"
    optimistic: true
    icon: "mdi:led-on"
    on_turn_on:
      script.execute: set_leds
    on_turn_off:
      script.execute: set_leds

script:
  - id: set_led_red_orange
    then:
      - if:
          condition:
            - switch.is_on: switch_led_red
          then:
            - switch.turn_on: switch_led_power
            - lambda: |-
                esphome::esp8266::ESP8266GPIOPin pin = esphome::esp8266::ESP8266GPIOPin();
                pin.set_pin(${pin_number_led_red_orange});
                pin.pin_mode(esphome::gpio::Flags::FLAG_OPEN_DRAIN | esphome::gpio::Flags::FLAG_OUTPUT);
                pin.digital_write(false);

      - if:
          condition:
            - switch.is_on: switch_led_orange
          then:
            - switch.turn_on: switch_led_power
            - lambda: |-
                esphome::esp8266::ESP8266GPIOPin pin = esphome::esp8266::ESP8266GPIOPin();
                pin.set_pin(${pin_number_led_red_orange});
                pin.pin_mode(esphome::gpio::Flags::FLAG_OUTPUT);
                pin.digital_write(true);

      - if:
          condition:
            - switch.is_off: switch_led_red
            - switch.is_off: switch_led_orange
          then:
            - switch.turn_off: switch_led_power
            - lambda: |-
                esphome::esp8266::ESP8266GPIOPin pin = esphome::esp8266::ESP8266GPIOPin();
                pin.set_pin(${pin_number_led_red_orange});
                pin.pin_mode(esphome::gpio::Flags::FLAG_OUTPUT | esphome::gpio::Flags::FLAG_OPEN_DRAIN);
                pin.digital_write(true);

  - id: set_leds
    then:
      if:
        condition:
          - switch.is_on: switch_leds_active
          - or:
            - and:
              - number.in_range:
                  id: co2_critical_level
                  above: 0.1
              - lambda: return id(mhz19_co2_sensor).state >= id(co2_critical_level).state;
            - and:
              - number.in_range:
                  id: pm_critical_level
                  above: 0.1
              - lambda: return id(pm1006_pm_sensor).state >= id(pm_critical_level).state;
            - and:
              - number.in_range:
                  id: tvoc_critical_level
                  above: 0.1
              - lambda: return id(ccs811_tvoc_sensor).state >= id(tvoc_critical_level).state;
        then:
          - switch.turn_off: switch_led_orange
          - switch.turn_on: switch_led_red
          - switch.turn_off: switch_led_green

        else:
          if:
            condition:
              - switch.is_on: switch_leds_active
              - or:
                - and:
                  - number.in_range:
                      id: co2_warn_level
                      above: 0.1
                  - lambda: return id(mhz19_co2_sensor).state >= id(co2_warn_level).state;
                - and:
                  - number.in_range:
                      id: pm_warn_level
                      above: 0.1
                  - lambda: return id(pm1006_pm_sensor).state >= id(pm_warn_level).state;
                - and:
                  - number.in_range:
                      id: tvoc_warn_level
                      above: 0.1
                  - lambda: return id(ccs811_tvoc_sensor).state >= id(tvoc_warn_level).state;
            then:
              - switch.turn_off: switch_led_green
              - switch.turn_off: switch_led_red
              - switch.turn_on: switch_led_orange

            else:
              if:
                condition:
                  switch.is_on: switch_leds_active
                then:
                  - switch.turn_off: switch_led_red
                  - switch.turn_off: switch_led_orange
                  - switch.turn_on: switch_led_green
                else:
                  - switch.turn_off: switch_led_red
                  - switch.turn_off: switch_led_orange
                  - switch.turn_off: switch_led_green

